{"ast":null,"code":"import _defineProperty from \"/Users/pepsico/React/e-comm/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport CartActionTypes from './cart.types';\nimport { addItemGrouper, removeItemFromCart } from './cart.utils';\nconst INIT = {\n  hidden: true,\n  cartItems: []\n};\n\nconst cartRed = (state = INIT, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART:\n      return _objectSpread({}, state, {\n        hidden: !state.hidden\n      });\n\n    case CartActionTypes.ADD_ITEM:\n      return _objectSpread({}, state, {\n        cartItems: addItemGrouper(state.cartItems, action.payload)\n      });\n\n    case CartActionTypes.REMOVE_ITEM:\n      return _objectSpread({}, state, {\n        cartItems: removeItemFromCart(state.cartItems, action.payload)\n      });\n\n    case CartActionTypes.CLEAR_ITEM:\n      return _objectSpread({}, state, {\n        cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id)\n      });\n\n    case CartActionTypes.CLEAR_CART:\n      return _objectSpread({}, state, {\n        cartItems: []\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default cartRed;","map":{"version":3,"sources":["/Users/pepsico/React/e-comm/src/redux/cart/cart.reducer.js"],"names":["CartActionTypes","addItemGrouper","removeItemFromCart","INIT","hidden","cartItems","cartRed","state","action","type","TOGGLE_CART","ADD_ITEM","payload","REMOVE_ITEM","CLEAR_ITEM","filter","cartItem","id","CLEAR_CART"],"mappings":";;;;;;AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAAQC,cAAR,EAAuBC,kBAAvB,QAAgD,cAAhD;AAEA,MAAMC,IAAI,GAAG;AACTC,EAAAA,MAAM,EAAC,IADE;AAETC,EAAAA,SAAS,EAAE;AAFF,CAAb;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACJ,IAAP,EAAaK,MAAb,KAAwB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,eAAe,CAACU,WAArB;AACI,+BACOH,KADP;AAEIH,QAAAA,MAAM,EAAE,CAACG,KAAK,CAACH;AAFnB;;AAKJ,SAAKJ,eAAe,CAACW,QAArB;AACI,+BACOJ,KADP;AAEIF,QAAAA,SAAS,EAAEJ,cAAc,CAACM,KAAK,CAACF,SAAP,EAAiBG,MAAM,CAACI,OAAxB;AAF7B;;AAKJ,SAAKZ,eAAe,CAACa,WAArB;AACI,+BACON,KADP;AAEIF,QAAAA,SAAS,EAAEH,kBAAkB,CAACK,KAAK,CAACF,SAAP,EAAiBG,MAAM,CAACI,OAAxB;AAFjC;;AAKJ,SAAKZ,eAAe,CAACc,UAArB;AACI,+BACOP,KADP;AAEIF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBU,MAAhB,CACPC,QAAQ,IAAKA,QAAQ,CAACC,EAAT,KAAgBT,MAAM,CAACI,OAAP,CAAeK,EADrC;AAFf;;AAOJ,SAAKjB,eAAe,CAACkB,UAArB;AACI,+BACOX,KADP;AAEIF,QAAAA,SAAS,EAAE;AAFf;;AAIJ;AACI,aAAOE,KAAP;AAjCR;AAmCH,CApCD;;AAsCA,eAAeD,OAAf","sourcesContent":["import CartActionTypes from './cart.types'\nimport {addItemGrouper,removeItemFromCart} from './cart.utils'\n\nconst INIT = {\n    hidden:true,\n    cartItems: []\n}\n\nconst cartRed = (state=INIT, action) => {\n    switch (action.type) {\n        case CartActionTypes.TOGGLE_CART:\n            return {\n                ...state,\n                hidden: !state.hidden\n            }\n\n        case CartActionTypes.ADD_ITEM:\n            return {\n                ...state,\n                cartItems: addItemGrouper(state.cartItems,action.payload)\n            }\n\n        case CartActionTypes.REMOVE_ITEM:\n            return {\n                ...state,\n                cartItems: removeItemFromCart(state.cartItems,action.payload)\n            }\n\n        case CartActionTypes.CLEAR_ITEM:\n            return {\n                ...state,\n                cartItems: state.cartItems.filter(\n                    cartItem => (cartItem.id !== action.payload.id)\n                )\n            }\n        \n        case CartActionTypes.CLEAR_CART:\n            return{\n                ...state,\n                cartItems: []\n            }    \n        default:\n            return state\n    }\n}\n\nexport default cartRed"]},"metadata":{},"sourceType":"module"}
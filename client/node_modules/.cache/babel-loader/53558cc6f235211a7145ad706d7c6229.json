{"ast":null,"code":"import _defineProperty from \"/Users/pepsico/React/e-comm/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDoc, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure } from './user.actions';\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put([signInFailure(error)]);\n  }\n}\nexport function* isAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (userAuth === null) return;else {\n      yield getSnapshotFromUserAuth(userAuth);\n    }\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* getSnapshotFromUserAuth(user) {\n  try {\n    const userRef = yield call(createUserProfileDoc, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isAuthenticated);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/pepsico/React/e-comm/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDoc","getCurrentUser","signInSuccess","signInFailure","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithGoogle","signInWithPopup","user","getSnapshotFromUserAuth","error","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isAuthenticated","userAuth","userRef","userSnapshot","get","id","data","onCheckUserSession","CHECK_USER_SESSION","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":";;;;;;AAAA,SAAQA,UAAR,EAAmBC,GAAnB,EAAuBC,GAAvB,EAA2BC,IAA3B,QAAsC,oBAAtC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,IAAR,EAAaC,cAAb,EAA4BC,oBAA5B,EAAkDC,cAAlD,QAAuE,+BAAvE;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,mBAAV,GAA+B;AAClC,QAAMX,UAAU,CAACI,eAAe,CAACQ,oBAAjB,EAAsCC,gBAAtC,CAAhB;AACH;AAED,OAAO,UAAUA,gBAAV,GAA4B;AAC/B,MAAG;AAAA,iBACgB,MAAMR,IAAI,CAACS,eAAL,CAAqBR,cAArB,CADtB;AAAA,UACQS,IADR,QACQA,IADR;;AAEC,UAAMC,uBAAuB,CAACD,IAAD,CAA7B;AACH,GAHD,CAGC,OAAME,KAAN,EAAY;AACT,UAAMhB,GAAG,CAACS,aAAa,CAACO,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP;AAAV,CAA1B,EAAsD;AACzD,MAAG;AAAA,kBACgB,MAAMhB,IAAI,CAACiB,0BAAL,CAAgCF,KAAhC,EAAsCC,QAAtC,CADtB;AAAA,UACQN,IADR,SACQA,IADR;;AAEC,UAAMC,uBAAuB,CAACD,IAAD,CAA7B;AACH,GAHD,CAIA,OAAME,KAAN,EAAY;AACR,UAAMhB,GAAG,CAAC,CAACS,aAAa,CAACO,KAAD,CAAd,CAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUM,eAAV,GAA2B;AAC9B,MACA;AACI,UAAMC,QAAQ,GAAG,MAAMhB,cAAc,EAArC;AACA,QAAGgB,QAAQ,KAAK,IAAhB,EACI,OADJ,KAEI;AACA,YAAMR,uBAAuB,CAACQ,QAAD,CAA7B;AACH;AACJ,GARD,CASA,OAAMP,KAAN,EAAY;AACR,UAAMhB,GAAG,CAACS,aAAa,CAACO,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUD,uBAAV,CAAkCD,IAAlC,EAAwC;AAC3C,MAAG;AACC,UAAMU,OAAO,GAAG,MAAMtB,IAAI,CAACI,oBAAD,EAAsBQ,IAAtB,CAA1B;AACA,UAAMW,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAM1B,GAAG,CAACQ,aAAa;AAAEmB,MAAAA,EAAE,EAACF,YAAY,CAACE;AAAlB,OAAwBF,YAAY,CAACG,IAAb,EAAxB,EAAd,CAAT;AACH,GAJD,CAIC,OAAMZ,KAAN,EAAY;AACT,UAAMhB,GAAG,CAACS,aAAa,CAACO,KAAD,CAAd,CAAT;AACH;AACJ;AACD,OAAO,UAAUa,kBAAV,GAA8B;AACjC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,kBAAjB,EAAoCR,eAApC,CAAhB;AACH;AAED,OAAO,UAAUS,kBAAV,GAA8B;AACjC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,mBAAjB,EAAqCf,eAArC,CAAhB;AACH;AAED,OAAO,UAAUgB,SAAV,GAAqB;AACxB,QAAMhC,GAAG,CAAC,CAACC,IAAI,CAACQ,mBAAD,CAAL,EAA2BR,IAAI,CAAC6B,kBAAD,CAA/B,EAAoD7B,IAAI,CAAC2B,kBAAD,CAAxD,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest,put,all,call} from 'redux-saga/effects'\nimport UserActionTypes from './user.types'\nimport {auth,googleProvider,createUserProfileDoc, getCurrentUser} from '../../firebase/firebase.utils'\nimport { signInSuccess, signInFailure } from './user.actions';\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle)\n}\n\nexport function* signInWithGoogle(){\n    try{\n        const {user} = yield auth.signInWithPopup(googleProvider)\n        yield getSnapshotFromUserAuth(user)\n    }catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* signInWithEmail({payload: {email,password}}){\n    try{\n        const {user} = yield auth.signInWithEmailAndPassword(email,password);\n        yield getSnapshotFromUserAuth(user)\n    }\n    catch(error){\n        yield put([signInFailure(error)])\n    }\n}\n\nexport function* isAuthenticated(){\n    try\n    {\n        const userAuth = yield getCurrentUser();\n        if(userAuth === null)\n            return\n        else{\n            yield getSnapshotFromUserAuth(userAuth)\n        }\n    }\n    catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* getSnapshotFromUserAuth(user) {\n    try{\n        const userRef = yield call(createUserProfileDoc,user);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({id:userSnapshot.id,...userSnapshot.data()}))\n    }catch(error){\n        yield put(signInFailure(error))\n    }\n}\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isAuthenticated)\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail)\n}\n\nexport function* userSagas(){\n    yield all([call(onGoogleSignInStart),call(onEmailSignInStart),call(onCheckUserSession)])\n}"]},"metadata":{},"sourceType":"module"}
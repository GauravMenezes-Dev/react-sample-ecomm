{"ast":null,"code":"import _defineProperty from \"/Users/pepsico/React/e-comm/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDoc, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFail, userSignUpFail, userSignUpSuccess } from './user.actions';\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put([signInFailure(error)]);\n  }\n}\nexport function* isAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (userAuth === null) return;else {\n      yield getSnapshotFromUserAuth(userAuth);\n    }\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* getSnapshotFromUserAuth(user) {\n  try {\n    const userRef = yield call(createUserProfileDoc, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isAuthenticated);\n}\nexport function* onSignOut() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOutTime);\n}\nexport function* signOutTime() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFail(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* signUp({\n  email,\n  password,\n  displayName\n}) {\n  try {\n    const _ref3 = yield auth.createUserWithEmailAndPassword({\n      email,\n      password\n    }),\n          user = _ref3.user;\n\n    yield put(userSignUpSuccess({\n      user: user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(userSignUpFail(error));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOut)]);\n}","map":{"version":3,"sources":["/Users/pepsico/React/e-comm/src/redux/user/user.saga.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDoc","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFail","userSignUpFail","userSignUpSuccess","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithGoogle","signInWithPopup","user","getSnapshotFromUserAuth","error","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isAuthenticated","userAuth","userRef","userSnapshot","get","id","data","onCheckUserSession","CHECK_USER_SESSION","onSignOut","SIGN_OUT_START","signOutTime","signOut","onEmailSignInStart","EMAIL_SIGN_IN_START","signUp","displayName","createUserWithEmailAndPassword","additionalData","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest,put,all,call} from 'redux-saga/effects'\nimport UserActionTypes from './user.types'\nimport {auth,googleProvider,createUserProfileDoc, getCurrentUser} from '../../firebase/firebase.utils'\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFail, userSignUpFail, userSignUpSuccess } from './user.actions';\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle)\n}\n\nexport function* signInWithGoogle(){\n    try{\n        const {user} = yield auth.signInWithPopup(googleProvider)\n        yield getSnapshotFromUserAuth(user)\n    }catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* signInWithEmail({payload: {email,password}}){\n    try{\n        const {user} = yield auth.signInWithEmailAndPassword(email,password);\n        yield getSnapshotFromUserAuth(user)\n    }\n    catch(error){\n        yield put([signInFailure(error)])\n    }\n}\n\nexport function* isAuthenticated(){\n    try\n    {\n        const userAuth = yield getCurrentUser();\n        if(userAuth === null)\n            return\n        else{\n            yield getSnapshotFromUserAuth(userAuth)\n        }\n    }\n    catch(error){\n        yield put(signInFailure(error))\n    }\n}\n\nexport function* getSnapshotFromUserAuth(user) {\n    try{\n        const userRef = yield call(createUserProfileDoc,user);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({id:userSnapshot.id,...userSnapshot.data()}))\n    }catch(error){\n        yield put(signInFailure(error))\n    }\n}\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isAuthenticated)\n}\n\nexport function* onSignOut(){\n    yield takeLatest(UserActionTypes.SIGN_OUT_START,signOutTime)\n}\n\nexport function* signOutTime(){\n    try{\n        yield auth.signOut();\n        yield put(signOutSuccess())\n    }\n    catch(error){\n        yield put(signOutFail(error))\n    }\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail)\n}\n\nexport function* signUp({email,password,displayName}){\n    try{\n        const {user} = yield auth.createUserWithEmailAndPassword(\n            {\n                email, \n                password\n            }\n        );\n        yield put(userSignUpSuccess(\n            {\n                user: user,\n                additionalData: {displayName}\n            })\n        )\n    }\n    catch(error){\n        yield put(userSignUpFail(error))\n    }\n}\n\nexport function* onSignUpStart(){\n    yield takeLatest(UserActionTypes.SIGN_UP_START,signUp)\n}\n\nexport function* userSagas(){\n    yield all([call(onGoogleSignInStart),call(onEmailSignInStart),call(onCheckUserSession),call(onSignOut)])\n}\n"]},"metadata":{},"sourceType":"module"}
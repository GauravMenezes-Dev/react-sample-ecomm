{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convSnapToMap } from '../../firebase/firebase.utils';\nexport function* fetchCollAsync() {\n  yield console.log('I am groot');\n  const CollRef = firestore.collection('collections');\n  CollRef.get().then(snapshot => {\n    const collObj = convSnapToMap(snapshot);\n    dispatch(fetchCollPass(collObj));\n    this.setState({\n      loading: false\n    });\n  }).catch(err => dispatch(fetchCollFail(err.message)));\n}\nexport function* fetchCollStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLL_START, fetchCollAsync);\n}","map":{"version":3,"sources":["/Users/pepsico/React/e-comm/src/redux/shop/shop.saga.js"],"names":["takeEvery","ShopActionTypes","firestore","convSnapToMap","fetchCollAsync","console","log","CollRef","collection","get","then","snapshot","collObj","dispatch","fetchCollPass","setState","loading","catch","err","fetchCollFail","message","fetchCollStart","FETCH_COLL_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,SAAR,EAAkBC,aAAlB,QAAsC,+BAAtC;AAEA,OAAO,UAAUC,cAAV,GAA0B;AAC7B,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AACA,QAAMC,OAAO,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAhB;AAEID,EAAAA,OAAO,CAACE,GAAR,GAAcC,IAAd,CAAmBC,QAAQ,IAAI;AAC3B,UAAMC,OAAO,GAAGT,aAAa,CAACQ,QAAD,CAA7B;AACAE,IAAAA,QAAQ,CAACC,aAAa,CAACF,OAAD,CAAd,CAAR;AACA,SAAKG,QAAL,CAAc;AAACC,MAAAA,OAAO,EAAC;AAAT,KAAd;AACH,GAJD,EAIGC,KAJH,CAISC,GAAG,IAAIL,QAAQ,CAACM,aAAa,CAACD,GAAG,CAACE,OAAL,CAAd,CAJxB;AAKP;AAED,OAAO,UAAUC,cAAV,GAA0B;AAC7B,QAAMrB,SAAS,CACXC,eAAe,CAACqB,gBADL,EAEXlB,cAFW,CAAf;AAIH","sourcesContent":["import { takeEvery } from 'redux-saga/effects'\nimport ShopActionTypes from './shop.types'\nimport {firestore,convSnapToMap} from '../../firebase/firebase.utils'\n\nexport function* fetchCollAsync(){\n    yield console.log('I am groot')\n    const CollRef = firestore.collection('collections')\n\n        CollRef.get().then(snapshot => {\n            const collObj = convSnapToMap(snapshot)\n            dispatch(fetchCollPass(collObj))\n            this.setState({loading:false})\n        }).catch(err => dispatch(fetchCollFail(err.message)))\n}\n\nexport function* fetchCollStart(){\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLL_START,\n        fetchCollAsync\n    )\n}"]},"metadata":{},"sourceType":"module"}